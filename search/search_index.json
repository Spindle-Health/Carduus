{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Carduus","text":"<p>The open source implementation of the Open Privacy Preserving Record Linkage (OPPRL) protocol build on Spark.</p>"},{"location":"#rationale","title":"Rationale","text":"<p>Privacy Preserving Record Linkage (PPRL) systems are used to obfuscate identifying attributes or other sensitive information about the subjects described in the records of a dataset while still preserving the ability to link records pertaining to the same subject through the use of an encrypted token. This practice is sometimes referred to as \"tokenization\" and is one of the components of data deidenfication.</p> <p>The task of PPRL is to replace the attributes of a every record denoting Personally Identifiable Information (PII) with a token produced by a one-way cryptographic function. This prevents observers of the tokenized data from reversing the token into the sensitive PII attributes. The tokens are produced deterministically such that input records with the same, or similar, PII attributes will produce an identical token. This allows user of multiple tokenized data assets to associate records that are highly likely to belong to the same data subject without having acces to PII.</p> <p>Tokenization is also used when data is shared between organizations to limit the scope of damages in the event that one organization's data is compromised. Each party's tokens are created via encryption using a different secret key so that any compromised data asset is only matchable to other datasets mantained by the same party. During data sharing transactions, a specific \"transcryption\" data flow is used to re-encrpt the sender's tokens into tokens that match the receipient's data without recovering the underlying PII.</p> <p>Carduus is the first (and canonical) implemenation of the Open Privacy Preserving Record Linkage (OPPRL) specification. This specification presents a standardized methodology for tokenization that can be implemented in any data system to increase interoperability. The carduus implementation is a python library that distributes the tokenization workload using apache Spark.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Warning: The first release <code>carduus</code> library has not yet been published to PyPi but can be installed from source.</p> <p>You can install the <code>carduus</code> library into your Python environment using <code>pip</code></p> <pre><code>pip install carduus\n</code></pre> <p>See the full API documentation and an example usage for further documentaiton.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See <code>CONTRIBUTING.md</code> for a guide on how to contribute to Carduus.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>These community rules are put in place in order to ensure that development of  carduus stays focused and productive.</p>"},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported anonymously using this form. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing to carduus","text":"<p>All interest in carduus, as a user or contributor, is greatly appreciated! This document will go into detail on how to contribute to the development of the carduus software package.</p> <p>If you are looking to contribute to the research and design of the Open Privacy Preserving Record Linkage (OPPRL) specification, see this page.</p>"},{"location":"CONTRIBUTING/#before-contributing","title":"Before Contributing","text":"<p>Before reading further we ask that you read our Code of Conduct which will be enforced by the maintainers in order to ensure that development of carduus stays focused and productive.</p> <p>If you are new to contributing to open source, or GitHub, the following links may be helpful starting places:</p> <ul> <li>How to Contribute to Open Source</li> <li>Understanding the GitHub flow</li> </ul>"},{"location":"CONTRIBUTING/#we-use-github-flow","title":"We Use Github Flow","text":"<p>This means that all code and documentation changes happen through pull requests. We actively welcome your pull requests. We highly recommend the following workflow.</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Create the pull request.</li> </ol>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-mit-software-license","title":"Any contributions you make will be under the MIT Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#how-to-contribute-a","title":"How to contribute a ...","text":""},{"location":"CONTRIBUTING/#bug-report","title":"Bug Report","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue.</p> <p>Great Bug Reports tend to have at least the following:</p> <ul> <li>A quick summary and/or background</li> <li>The steps to reproduce.</li> <li>When possible, minimal code that reproduces the bug.</li> <li>A description of what you expected versus what actually happens.</li> </ul>"},{"location":"CONTRIBUTING/#feature-request","title":"Feature Request","text":"<p>We like to hear in all feature requests and discussion around the direction of the project. The best place to discuss future features is the project's discussion page under the ideas category.</p>"},{"location":"CONTRIBUTING/#bug-fix-new-feature-documentation-improvement-or-other-change","title":"Bug fix, new feature, documentation improvement, or other change.","text":"<p>We welcome contribution to the codebase via pull requests. In most cases, it is beneficial to discuss your change with the community via a GitHub issue or discussion before working on a pull request. Once you decide to work on a pull request, please follow the workflow outlined in the above sections.</p> <p>Once you open the pull request, it will be tested with by CI and reviewed by other contributors (including at least one project maintainer). After all iterations of review are finished, one of the project maintainers will merge your pull request.</p>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<p>When working on a code change or addition to carduus, it is expected that all changes  pass existing tests and probably introduce new tests to ensure stability of future changes. </p> <p>Before you are able to run tests, you must have a virtual environment for the project. Carduus uses  Poetry to manage Python environments. Once poetry is installed, run the following in  the root directory of the project.</p> <pre><code>poetry install\n</code></pre> <p>To run the test suite, use the following command in the root of the project.</p> <pre><code>poetry run pytest\n</code></pre>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Spindle Health LLC</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api/","title":"Functions","text":""},{"location":"api/#carduus.token.tokenize","title":"carduus.token.tokenize","text":"<pre><code>tokenize(df, pii_transforms, tokens, key_service=None)\n</code></pre> <p>Replaces all PII attributes with encrypted tokens.</p> <p>All PII columns found in the <code>DataFrame</code> are normalized using the provided <code>pii_transforms</code>. All PII attributes provided by the enhancements of the <code>pii_transforms</code> are added if they are not already present in the <code>DataFrame</code>. The fields of each <code>TokenInfo</code> from <code>tokens</code> are hashed and encrypted together according to the OPPRL specification. Finally, the PII columns are dropped.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The pyspark <code>DataFrame</code> containing all PII attribures.</p> required <code>pii_transforms</code> <code>dict[str, PiiTransform | OpprlPii]</code> <p>A dictionary that maps column names of <code>df</code> to PiiTransform objects to specify how each raw PII column is normalized and enhanced into derived PII attributes. Values can also be a member of the OpprlPii enum if using the standard OPPRL tokens.</p> required <code>tokens</code> <code>Iterable[TokenInfo | OpprlToken]</code> <p>A collection of <code>TokenInfo</code> objects that denotes which PII attibutes are encrypted into each token. Elements can also be a member of the OpprlToken enum if using the standard OPPRL tokens.</p> required <code>key_service</code> <code>EncryptionKeyService | None</code> <p>An optional <code>EncryptionKeyService</code> instance that serves your private keys and the public keys of the parties you exchange data with. Default is an instance of <code>SparkConfKeyService</code> which looks for encryption keys loaded as spark configuration properties.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The <code>DataFrame</code> with PII columns replaced by encrypted tokens.</p>"},{"location":"api/#carduus.token.transcrypt_out","title":"carduus.token.transcrypt_out","text":"<pre><code>transcrypt_out(\n    df, token_columns, destination, key_service=None\n)\n</code></pre> <p>Prepares a <code>DataFrame</code> containing encrypted tokens to be sent to a specific trusted party by re-encrypting the tokens using the recipient's public key without exposing the original PII.</p> <p>Output tokens will be unmatchable to any dataset or within the given dataset until the intended receipient processes the data with []<code>transcrypt_in</code>][carduus.token.transcrypt_in].</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Spark <code>DataFrame</code> with token columns to transcrypt.</p> required <code>token_columns</code> <code>Iterable[str]</code> <p>The collection of column names that correspond to tokens.</p> required <code>destination</code> <code>str</code> <p>The name of the destination that will be receiving transcrypted data. Used to lookup the appropriate public keys for asymmetric encryption.</p> required <code>key_service</code> <code>EncryptionKeyService | None</code> <p>An optional <code>EncryptionKeyService</code> instance that serves your private keys and the public keys of the parties you exchange data with. Default is an instance of <code>SparkConfKeyService</code> which looks for encryption keys loaded as spark configuration properties.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The <code>DataFrame</code> with the origional encrypted tokens re-encrypted for sending to the destination.</p>"},{"location":"api/#carduus.token.transcrypt_in","title":"carduus.token.transcrypt_in","text":"<pre><code>transcrypt_in(df, token_columns, key_service=None)\n</code></pre> <p>Used by the recipient of a <code>DataFrame</code> containing tokens in the intermediate representation produced by <code>transcrypt_out</code> to re-encrypt the tokens such that they will match with other datasets</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Spark <code>DataFrame</code> with token columns to transcrypt.</p> required <code>token_columns</code> <code>Iterable[str]</code> <p>The collection of column names that correspond to tokens.</p> required <code>key_service</code> <code>EncryptionKeyService | None</code> <p>An optional <code>EncryptionKeyService</code> instance that serves your private keys and the public keys of the parties you exchange data with. Default is an instance of <code>SparkConfKeyService</code> which looks for encryption keys loaded as spark configuration properties.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The <code>DataFrame</code> with the origional encrypted tokens re-encrypted for sending to the destination.</p>"},{"location":"api/#carduus.token.TokenInfo","title":"<code>carduus.token.TokenInfo</code>  <code>dataclass</code>","text":"<p>An ordered set of PII fields that will be encrypted together to create a token.</p> <p>For an enum of standard <code>TokenInfo</code> instances that comply with the Open Privacy Preserving Record Linkage specification see <code>OpprlToken</code>.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the column that holds these tokens.</p> <code>fields</code> <code>tuple[str, ...]</code> <p>The PII fields to encrypt together to create token values.</p>"},{"location":"api/#opprl-implementation","title":"OPPRL Implementation","text":"<p>Carduus is an extensible framework for implementing tokenization and record linkage systems, that also provides an implementation of the Open Privacy Preserving Record Linkage protocol. </p>"},{"location":"api/#carduus.token.OpprlPii","title":"<code>carduus.token.OpprlPii</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum of PiiTransform objects for the PII fields supported by the Open Privacy Preserving Record Linkage specification.</p> <p>Attributes:</p> Name Type Description <code>first_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's first name according to the OPPRL standard.</p> <code>middle_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's middle name according to the OPPRL standard.</p> <code>last_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's last (aka family) name according to the OPPRL standard.</p> <code>gender</code> <code>GenderTransform</code> <p>PiiTransform implementation for a subject's gender according to the OPPRL standard.</p> <code>birth_date</code> <code>DateTransform</code> <p>PiiTransform implementation for a subject's date of birth according to the OPPRL standard.</p>"},{"location":"api/#carduus.token.OpprlToken","title":"<code>carduus.token.OpprlToken</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum of <code>TokenInfo</code> objects that meet the Open Privacy Preserving Record Linkage tokenization specification.</p> <p>Attributes:</p> Name Type Description <code>token1</code> <code>TokenInfo</code> <p>Standard Carduus token #1. Creates tokens based on <code>first_initial</code>, <code>last_name</code>, <code>gender</code>, and <code>birth_date</code>.</p> <code>token2</code> <code>TokenInfo</code> <p>Standard Carduus token #2. Creates tokens based on <code>first_soundex</code>, <code>last_soundex</code>, <code>gender</code>, and <code>birth_date</code>.</p>"},{"location":"api/#encryption-key-management","title":"Encryption Key Management","text":"<p>Carduus provides</p>"},{"location":"api/#carduus.keys.SparkConfKeyService","title":"<code>carduus.keys.SparkConfKeyService</code>","text":"<p>             Bases: <code>EncryptionKeyService</code></p>"},{"location":"api/#carduus.keys.InMemoryKeyService","title":"<code>carduus.keys.InMemoryKeyService</code>","text":"<p>             Bases: <code>EncryptionKeyService</code></p>"},{"location":"api/#interfaces","title":"Interfaces","text":"<p>Carduus offers interfaces that can be extended by the user to add additional behaviors to the tokenization process.</p> <p>The primary extention </p>"},{"location":"api/#carduus.token.PiiTransform","title":"<code>carduus.token.PiiTransform</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for normalization and enhancement of a specific PII attribute.</p> <p>Intended to be extended by users to add support for building tokens from a custom PII attribute.</p>"},{"location":"api/#carduus.token.PiiTransform.normalize","title":"<code>normalize(column, dtype)</code>","text":"<p>A normalized representation of the PII column.</p> <p>A normalized value has eliminated all representation or encoding differences so all instances of the same logical values have identical physical values. For example, text attributes will often be normalized by filtering to alpha-numeric characters and whitespace, standardizing to whitespace to the space character, and converting all alpha characters to uppercase to ensure that all ways of representing the same phrase normalize to the exact same string.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>Column</code> <p>The spark <code>Column</code> expression for the PII attribute being normalized.</p> required <code>dtype</code> <code>DataType</code> <p>The spark <code>DataType</code> object of the <code>column</code> object found on the <code>DataFrame</code> being normalized. Can be used to delegate to different normalization logic based on different schemas of input data. For example, a subject's birth date may be a <code>DateType</code>, <code>StringType</code>, or <code>LongType</code> on input data and thus requires corresponding normalization into a <code>DateType</code>.</p> required <p>Returns:</p> Type Description <code>Column</code> <p>The normalized version of the PII attribute.</p>"},{"location":"api/#carduus.token.PiiTransform.enhancments","title":"<code>enhancments(column)</code>","text":"<p>A collection of PII attributes that can be automatically derived from a given normalized PII attribute</p> <p>If an implementation of PiiTransform does not override this method, it is assumed that no enhancements can be derived</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>Column</code> <p>The normalized PII column to produce enhancements from.</p> required Return <p>A <code>dict</code> with keys that correspond to the PII attributes of the ___ and values that correspond to the <code>Column</code> expression that produced the new PII from a normalized input attribute.</p>"},{"location":"api/#carduus.keys.EncryptionKeyService","title":"<code>carduus.keys.EncryptionKeyService</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for key services. Can be implemented to call out whichever service you use to manage encryption keys.</p>"},{"location":"api/#carduus.keys.EncryptionKeyService.private_key","title":"<code>private_key()</code>  <code>abstractmethod</code>","text":"<p>Provides your private key.</p>"},{"location":"api/#carduus.keys.EncryptionKeyService.public_key_of","title":"<code>public_key_of(profile)</code>  <code>abstractmethod</code>","text":"<p>Provides the public key of a specific profiles (aka partner) that you share data with.</p>"},{"location":"databricks/","title":"Carduus &amp; Databricks","text":"<p>The carduus package runs in any python environment, including standalone applications and large Spark clusters. Databricks is a leading big-data analytics platform that provides spark customer to handle large workloads.</p> <p>The following is an example Python notebook exported from a Databricks workspace that demonstrates how to setup and use all of the carduus functionality from within Databricks.</p>"},{"location":"opprl/","title":"Open Privacy Preserving Record Linkage","text":"<p>Open Privacy Preserving Record Linkage (OPPRL) is a specification for a privacy preserving record linkage system that can be implemented across data systems to assist in the deidenfication of data in a way that preserves privacy while enabling sharing of data assets between trusted organizations.</p> <p>Implementers can find the full specification on the OPPRL Specification page.</p> <p>As an open specification, all practitioners that interact with OPPRL implementations are invited to contribute to discussion, research, and proposals for improvements to the specification. For details on how to participate, see the OPPRL contributing guide.</p>"},{"location":"opprl/contrib/","title":"Contributing to the OPPRL protocol","text":"<p> This specification is incomplete.</p>"},{"location":"opprl/contrib/#contributing-opprl-evaluation-data","title":"Contributing OPPRL Evaluation Data","text":"<p>Post on the discussion board in the OPPRL section. </p>"},{"location":"opprl/contrib/#contributing-research","title":"Contributing Research","text":"<p>Post on the discussion board in the OPPRL section. </p>"},{"location":"opprl/contrib/#proposing-changes","title":"Proposing Changes","text":"<p>Open a PR to spec document in the Carduus repository.</p>"},{"location":"opprl/spec/","title":"OPPRL v0.1 Specification","text":"<p> Warning</p> <p>This specification is incomplete and actively being written collaboratively in the open. Many sections are missing and the specifics may change dramatically.</p> <p>If you would like to join </p> <p>Authors of OPPRL implementations should expect breaking changes, and interoperability between implementation cannot be guarenteed until an official version 1.0 is published.</p> <p>Privacy Preserving Record Linkage (PPRL) systems are used to obfuscate identifying attributes or other sensitive information about the subjects described in the records of a dataset while still preserving the ability to link records pertaining to the same subject through the use of an encrypted token. This practice is sometimes referred to as \"tokenization\" and is one of the components of data deidenfication.</p> <p>The task of PPRL is to replace the attributes of a every record denoting Personally Identifiable Information (PII) with a token produced by a one-way cryptographic function. This prevents observers of the tokenized data from reversing the token into the sensitive PII attributes. The tokens are produced deterministically such that input records with the same, or similar, PII attributes will produce an identical token. This allows user of multiple tokenized data assets to associate records that are highly likely to belong to the same data subject without having acces to PII.</p> <p>Tokenization is also used when data is shared between organizations to limit the scope of damages in the event that one organization's data is compromised. Each party's tokens are created via encryption using a different secret key so that any compromised data asset is only matchable to other datasets mantained by the same party. During data sharing transactions, a specific \"transcryption\" data flow is used to re-encrpt the sender's tokens into tokens that match the receipient's data without recovering the underlying PII.</p>"},{"location":"opprl/spec/#about-this-specification","title":"About this specification","text":"<ul> <li>SemVer</li> </ul>"},{"location":"opprl/spec/#glossary","title":"Glossary","text":"<ul> <li>Data Asset: A collection of records with attributes. Can be a single dataset, or a collection of related datasets.</li> <li>Subject: A person who is being decribed by one or more recoreds in a data asset.</li> <li>PII: Personally Identifying Information. Attributes of a data asset that can be used to determine the identity of a subject. Examples include name, residential address, gender, age, phone number, email, as well as other demographic, socio-ecominic, and </li> <li>Token: An arbitrary string of text derived deterministically from PII that can be used to identify records pertaining the same subject. Tokens provide nearly no information about the underlying PII they are generated from and thus can be used to replace PII in a data asset</li> </ul>"},{"location":"opprl/spec/#1-tokenization","title":"1 Tokenization","text":"<p>Convertion of PII attributes into tokens.</p>"},{"location":"opprl/spec/#requirements","title":"Requirements","text":""},{"location":"opprl/spec/#11-data-flow","title":"1.1 Data Flow","text":"<p>Inputs:</p> <ol> <li>An AES encryption key unique to data asset.</li> <li>PII Transformations</li> <li>Token specificaitnos.</li> </ol>"},{"location":"opprl/spec/#111-normalization","title":"1.1.1 Normalization","text":""},{"location":"opprl/spec/#112-enhancement","title":"1.1.2 Enhancement","text":""},{"location":"opprl/spec/#113-fragmentation","title":"1.1.3 Fragmentation","text":""},{"location":"opprl/spec/#114-hashing","title":"1.1.4 Hashing","text":""},{"location":"opprl/spec/#115-encryption","title":"1.1.5 Encryption","text":""},{"location":"opprl/spec/#116-base64-encoding","title":"1.1.6 Base64 Encoding","text":""},{"location":"opprl/spec/#2-transcyption","title":"2 Transcyption","text":"<p>The re-encryption of tokens for the purpose of safely delivering tokenized data between parties.</p>"},{"location":"opprl/spec/#requirements_1","title":"Requirements","text":""},{"location":"opprl/spec/#21-sender-data-frow","title":"2.1 Sender Data Frow","text":"<p>Inputs:</p> <ol> <li>The AES encryption key used to encrypt the PII hashes.</li> <li>The public RSA key of the receiver.</li> </ol> <p>The entire data flow must be performed by the sender with no malicious observers intercepting intermediate values.</p>"},{"location":"opprl/spec/#211-decode-base64","title":"2.1.1 Decode Base64","text":""},{"location":"opprl/spec/#212-aes-decryption","title":"2.1.2 AES Decryption","text":""},{"location":"opprl/spec/#213-rsa-encryption","title":"2.1.3 RSA Encryption","text":""},{"location":"opprl/spec/#214-encode-base64","title":"2.1.4 Encode Base64","text":""},{"location":"opprl/spec/#22-receiver-data-flow","title":"2.2 Receiver Data Flow","text":"<p>Inputs:</p> <ol> <li>The private RSA key of the receiver. It must corresponds to the public key used by the sender.</li> <li>An AES encryption key unique to the receiver.</li> </ol>"},{"location":"opprl/spec/#221-decode-base64","title":"2.2.1 Decode Base64","text":""},{"location":"opprl/spec/#222-rsa-decryption","title":"2.2.2 RSA Decryption","text":""},{"location":"opprl/spec/#223-aes-encryption","title":"2.2.3 AES Encryption","text":""},{"location":"opprl/spec/#224-encode-base64","title":"2.2.4 Encode Base64","text":""},{"location":"opprl/spec/#3-opprl-pii-transformations","title":"3 OPPRL PII Transformations","text":""},{"location":"opprl/spec/#31-normalizations","title":"3.1 Normalizations","text":""},{"location":"opprl/spec/#person-names","title":"Person Names","text":""},{"location":"opprl/spec/#gender","title":"Gender","text":""},{"location":"opprl/spec/#dates","title":"Dates","text":""},{"location":"opprl/spec/#32-enhancements","title":"3.2 Enhancements","text":""},{"location":"opprl/spec/#person-names_1","title":"Person Names","text":""},{"location":"opprl/spec/#dates_1","title":"Dates","text":""},{"location":"opprl/spec/#5-opprl-token-specifications","title":"5 OPPRL Token Specifications","text":""}]}