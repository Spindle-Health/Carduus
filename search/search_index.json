{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Carduus","text":"<p>The open source implementation of the Open Privacy Preserving Record Linkage (OPPRL) protocol build on Spark.</p>"},{"location":"#rationale","title":"Rationale","text":"<p>Privacy Preserving Record Linkage (PPRL) is crucial component to data de-identification systems. PPRL obfuscate identifying attributes or other sensitive information about the subjects described in the records of a dataset while still preserving the ability to link records pertaining to the same subject through the use of an encrypted token. This practice is sometimes referred to as \"tokenization\" and is one of the components of data de-identification.</p> <p>The task of PPRL is to replace the attributes of a every record denoting Personally Identifiable Information (PII) with a token produced by a one-way cryptographic function. This prevents observers of the tokenized data from obtaining the PII. The tokens are produced deterministically such that input records with the same, or similar, PII attributes will produce an identical token. This allows practitioners to associate records across datasets that are highly likely to belong to the same data subject without having access to PII.</p> <p>Tokenization is also used when data is shared between organizations to limit, or in some cases fully mitigate, the risk of subject re-identification in the event that an untrusted third party gains access to a dataset containing sensitive data. Each party produced encrypted tokens using a different secret key so that any compromised data asset is, at worst, only matchable to other datasets maintained by the same party. During data sharing transactions, a specific \"transcryption\" data flow is used to first re-encrypt the sender's tokens into ephemeral tokens that do not match tokens in any other dataset and can only be ingested using the recipients secret key. At no point in the \"transcryption\" data flow is the original PII used.</p> <p>Carduus is the first (and canonical) implementation of the Open Privacy Preserving Record Linkage (OPPRL) protocol. This protocol presents a standardized methodology for tokenization that can be implemented in any data system to increase interoperability. The carduus implementation is a python library that distributes the tokenization workload using apache Spark across multiple cores or multiple machines in a high performance computing cluster for efficient tokenization of any scale datasets.</p> <p>Why the name \"Carduus\"? The carduus is a genus of thistle plants that was used to brush fibrous materials so that individual fibres align in preparation for spinning the material into thread or yarn. Today this process is known as \"carding\" and is done by specialized machines.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See the getting started guide on the project's web page for an detailed explanation of how carduus is used including example code snippets.</p> <p>The full API and an example usage on Databricks are also provided on the project's web page.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Please refer to the carduus contributing guide for information on how to get started contributing to the project.</p>"},{"location":"#organizations-that-have-contributed-to-carduus","title":"Organizations that have contributed to Carduus","text":""},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>These community rules are put in place in order to ensure that development of  carduus stays focused and productive.</p>"},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported anonymously using this form. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing to carduus","text":"<p>All interest in carduus, as a user or contributor, is greatly appreciated! This document will go into detail on how to contribute to the development of the carduus software package.</p> <p>If you are looking to contribute to the research and design of the Open Privacy Preserving Record Linkage (OPPRL) specification, see this page.</p>"},{"location":"CONTRIBUTING/#before-contributing","title":"Before Contributing","text":"<p>Before reading further we ask that you read our Code of Conduct which will be enforced by the maintainers in order to ensure that development of carduus stays focused and productive.</p> <p>If you are new to contributing to open source, or GitHub, the following links may be helpful starting places:</p> <ul> <li>How to Contribute to Open Source</li> <li>Understanding the GitHub flow</li> </ul>"},{"location":"CONTRIBUTING/#we-use-github-flow","title":"We Use Github Flow","text":"<p>This means that all code and documentation changes happen through pull requests. We actively welcome your pull requests. We highly recommend the following workflow.</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Create the pull request.</li> </ol>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-mit-software-license","title":"Any contributions you make will be under the MIT Software License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same MIT License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#how-to-contribute-a","title":"How to contribute a ...","text":""},{"location":"CONTRIBUTING/#bug-report","title":"Bug Report","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue.</p> <p>Great Bug Reports tend to have at least the following:</p> <ul> <li>A quick summary and/or background</li> <li>The steps to reproduce.</li> <li>When possible, minimal code that reproduces the bug.</li> <li>A description of what you expected versus what actually happens.</li> </ul>"},{"location":"CONTRIBUTING/#feature-request","title":"Feature Request","text":"<p>We like to hear in all feature requests and discussion around the direction of the project. The best place to discuss future features is the project's discussion page under the ideas category.</p>"},{"location":"CONTRIBUTING/#bug-fix-new-feature-documentation-improvement-or-other-change","title":"Bug fix, new feature, documentation improvement, or other change.","text":"<p>We welcome contribution to the codebase via pull requests. In most cases, it is beneficial to discuss your change with the community via a GitHub issue or discussion before working on a pull request. Once you decide to work on a pull request, please follow the workflow outlined in the above sections.</p> <p>Once you open the pull request, it will be tested with by CI and reviewed by other contributors (including at least one project maintainer). After all iterations of review are finished, one of the project maintainers will merge your pull request.</p>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<p>When working on a code change or addition to carduus, it is expected that all changes  pass existing tests and probably introduce new tests to ensure stability of future changes. </p> <p>Before you are able to run tests, you must have a virtual environment for the project. Carduus uses  Poetry to manage Python environments. Once poetry is installed, run the following in  the root directory of the project.</p> <pre><code>poetry install\n</code></pre> <p>To run the test suite, use the following command in the root of the project.</p> <pre><code>poetry run pytest\n</code></pre>"},{"location":"LICENSE/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"api/","title":"Functions","text":"<p>THe core functionality of carduus is provided by a the following functions that operate over pyspark <code>DataFrame</code>.</p> <p>The <code>TokenSpec</code> class allows for custom tokens, beyond the builtin OPPRL tokens, to be generated during tokenization. See the custom tokens guide for more information.</p>"},{"location":"api/#carduus.token.tokenize","title":"carduus.token.tokenize","text":"<pre><code>tokenize(df, pii_transforms, tokens, private_key)\n</code></pre> <p>Adds encrypted token columns based on PII.</p> <p>All PII columns found in the <code>DataFrame</code> are normalized using the provided <code>pii_transforms</code>. All PII attributes provided by the enhancements of the <code>pii_transforms</code> are added if they are not already present in the <code>DataFrame</code>. The fields of each <code>TokenSpec</code> from <code>tokens</code> are hashed and encrypted together according to the OPPRL specification.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The pyspark <code>DataFrame</code> containing all PII attributes.</p> required <code>pii_transforms</code> <code>dict[str, PiiTransform | OpprlPii]</code> <p>A dictionary that maps column names of <code>df</code> to PiiTransform objects to specify how each raw PII column is normalized and enhanced into derived PII attributes. Values can also be a member of the OpprlPii enum if using the standard OPPRL tokens.</p> required <code>tokens</code> <code>Iterable[TokenSpec | OpprlToken]</code> <p>A collection of <code>TokenSpec</code> objects that denotes which PII attributes are encrypted into each token. Elements can also be a member of the OpprlToken enum if using the standard OPPRL tokens.</p> required <code>private_key</code> <code>bytes</code> <p>Your private RSA key.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The <code>DataFrame</code> with PII columns replaced by encrypted tokens.</p>"},{"location":"api/#carduus.token.transcrypt_out","title":"carduus.token.transcrypt_out","text":"<pre><code>transcrypt_out(\n    df, token_columns, recipient_public_key, private_key\n)\n</code></pre> <p>Prepares a <code>DataFrame</code> containing encrypted tokens to be sent to a specific trusted party by re-encrypting the tokens using the recipient's public key without exposing the original PII.</p> <p>Output tokens will be unmatchable to any dataset or within the given dataset until the intended recipient processes the data with <code>transcrypt_in</code>.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Spark <code>DataFrame</code> with token columns to transcrypt.</p> required <code>token_columns</code> <code>Iterable[str]</code> <p>The collection of column names that correspond to tokens.</p> required <code>recipient_public_key</code> <code>bytes</code> <p>The public RSA key of the recipient who will be receiving the dataset with ephemeral tokens.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The <code>DataFrame</code> with the original encrypted tokens re-encrypted for sending to the recipient.</p>"},{"location":"api/#carduus.token.transcrypt_in","title":"carduus.token.transcrypt_in","text":"<pre><code>transcrypt_in(df, token_columns, private_key)\n</code></pre> <p>Used by the recipient of a <code>DataFrame</code> containing tokens in the intermediate representation produced by <code>transcrypt_out</code> to re-encrypt the tokens such that they will match with other datasets</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Spark <code>DataFrame</code> with token columns to transcrypt.</p> required <code>token_columns</code> <code>Iterable[str]</code> <p>The collection of column names that correspond to tokens.</p> required <code>private_key</code> <code>bytes</code> <p>Your private RSA key. The ephemeral tokens must have been created with the corresponding public key by the sender.</p> required <p>Returns:     The <code>DataFrame</code> with the original encrypted tokens re-encrypted for sending to the destination.</p>"},{"location":"api/#carduus.token.TokenSpec","title":"<code>carduus.token.TokenSpec</code>  <code>dataclass</code>","text":"<p>An collection of PII fields that will be encrypted together to create a token.</p> <p>For an enum of standard <code>TokenSpec</code> instances that comply with the Open Privacy Preserving Record Linkage protocol see <code>OpprlToken</code>.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the column that holds these tokens.</p> <code>fields</code> <code>Iterable[str]</code> <p>The PII fields to encrypt together to create token values.</p>"},{"location":"api/#opprl-implementation","title":"OPPRL Implementation","text":"<p>Although carduus is designed to be extensible, most users will want to use the tokenization procedure proposed by the Open Privacy Preserving Record Linkage (OPPRL) protocol. This open specification proposes standard ways of normalizing, enhancing, and encrypting data such that all user across all OPPRL implementations, including carduus, can share data between trusted parties.</p> <p>The following two <code>enum</code> objects provide <code>PiiTransform</code> instances and <code>TokenSpec</code> instances that comply with OPPRL. These can be passed to the column mapping and token set arguments of <code>tokenize</code> respectively.</p>"},{"location":"api/#carduus.token.OpprlPii","title":"<code>carduus.token.OpprlPii</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum of PiiTransform objects for the PII fields supported by the Open Privacy Preserving Record Linkage specification.</p> <p>Attributes:</p> Name Type Description <code>first_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's first name according to the OPPRL standard.</p> <code>middle_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's middle name according to the OPPRL standard.</p> <code>last_name</code> <code>NameTransform</code> <p>PiiTransform implementation for a subject's last (aka family) name according to the OPPRL standard.</p> <code>gender</code> <code>GenderTransform</code> <p>PiiTransform implementation for a subject's gender according to the OPPRL standard.</p> <code>birth_date</code> <code>DateTransform</code> <p>PiiTransform implementation for a subject's date of birth according to the OPPRL standard.</p>"},{"location":"api/#carduus.token.OpprlToken","title":"<code>carduus.token.OpprlToken</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Enum of <code>TokenSpec</code> objects that meet the Open Privacy Preserving Record Linkage tokenization specification.</p> <p>Attributes:</p> Name Type Description <code>opprl_token_1</code> <p>Token #1 from the OPPRL specification. Creates tokens based on <code>first_initial</code>, <code>last_name</code>, <code>gender</code>, and <code>birth_date</code>.</p> <code>opprl_token_2</code> <p>Token #2 from the OPPRL specification. Creates tokens based on <code>first_soundex</code>, <code>last_soundex</code>, <code>gender</code>, and <code>birth_date</code>.</p> <code>orrpl_token_3</code> <p>Token #3 from the OPPRL specification. Creates tokens based on the <code>first_metaphone</code>, <code>last_metaphone</code>, <code>gender</code>, and <code>birth_date</code>.</p>"},{"location":"api/#encryption-key-management","title":"Encryption Key Management","text":"<p>See the encryption key section of the \"Getting started\" guide for details about how Carduus accesses encryption keys.</p>"},{"location":"api/#carduus.keys.generate_pem_keys","title":"carduus.keys.generate_pem_keys","text":"<pre><code>generate_pem_keys(key_size=2048)\n</code></pre> <p>Generates a fresh RSA key pair.</p> <p>Parameters:</p> Name Type Description Default <code>key_size</code> <code>int</code> <p>The size (in bits) of the key.</p> <code>2048</code> <p>Returns:</p> Type Description <code>tuple[bytes, bytes]</code> <p>A tuple containing the private key and public key bytes. Both in the PEM encoding.</p>"},{"location":"api/#interfaces","title":"Interfaces","text":"<p>Carduus offers interfaces that can be extended by the user to add additional behaviors to the tokenization and transcryption processes.</p> <p>The <code>PiiTransform</code> abstract base class can be extended to add support for custom PII attributes, normalizations, and enhancements. See the custom PII guide for more details.</p>"},{"location":"api/#carduus.token.PiiTransform","title":"<code>carduus.token.PiiTransform</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for normalization and enhancement of a specific PII attribute.</p> <p>Intended to be extended by users to add support for building tokens from a custom PII attribute.</p>"},{"location":"api/#carduus.token.PiiTransform.normalize","title":"<code>normalize(column, dtype)</code>","text":"<p>A normalized representation of the PII column.</p> <p>A normalized value has eliminated all representation or encoding differences so all instances of the same logical values have identical physical values. For example, text attributes will often be normalized by filtering to alpha-numeric characters and whitespace, standardizing to whitespace to the space character, and converting all alpha characters to uppercase to ensure that all ways of representing the same phrase normalize to the exact same string.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>Column</code> <p>The spark <code>Column</code> expression for the PII attribute being normalized.</p> required <code>dtype</code> <code>DataType</code> <p>The spark <code>DataType</code> object of the <code>column</code> object found on the <code>DataFrame</code> being normalized. Can be used to delegate to different normalization logic based on different schemas of input data. For example, a subject's birth date may be a <code>DateType</code>, <code>StringType</code>, or <code>LongType</code> on input data and thus requires corresponding normalization into a <code>DateType</code>.</p> required <p>Returns:</p> Type Description <code>Column</code> <p>The normalized version of the PII attribute.</p>"},{"location":"api/#carduus.token.PiiTransform.enhancements","title":"<code>enhancements(column)</code>","text":"<p>A collection of PII attributes that can be automatically derived from a given normalized PII attribute</p> <p>If an implementation of PiiTransform does not override this method, it is assumed that no enhancements can be derived</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>Column</code> <p>The normalized PII column to produce enhancements from.</p> required Return <p>A <code>dict</code> with keys that correspond to the PII attributes of the ___ and values that correspond to the <code>Column</code> expression that produced the new PII from a normalized input attribute.</p>"},{"location":"opprl/","title":"Open Privacy Preserving Record Linkage","text":"<p>Open Privacy Preserving Record Linkage (OPPRL) is a protocol for a privacy preserving record linkage system that can be implemented across data systems to assist in the de-identification of data in a way that preserves privacy while enabling sharing of data assets between trusted organizations.</p> <p>Implementers can find the full specification on the OPPRL Specification page.</p> <p>As an open specification, all practitioners that interact with OPPRL implementations are invited to contribute to discussion, research, and proposals for improvements to the specification. For details on how to participate, see the OPPRL contributing guide.</p>"},{"location":"guides/custom-pii/","title":"Using Custom PII","text":"<p>Carduus applies normalizations to incoming PII to account for representation differences that often don't indicate a different true identity for the subject. After normalizing the PII columns present on the data provided by the user, Carduus derives additional implicit PII attributes and adds them to the Dataset if they aren't already present. The procedure is called \"enhancement\". For example, a <code>first_initial</code> attributes can be derived from a <code>first_name</code> attribute by taking the first letter.</p> <p>Commonly used PII attributes have standard normalization and enhancement rules proposed in the OPPRL protocol. Carduus provides builtin implementations of the normalizations and enhancements via a set of concrete classes that implement the <code>PiiTransform</code> interface.</p> <p>Users may extend the <code>PiiTransform</code> abstract base class and provide instances to the column mapping used by the <code>tokenize</code> function.</p> <p> This guide is incomplete.</p>"},{"location":"guides/custom-tokens/","title":"Defining Custom Token Specifications","text":"<p>In essence, a token is simply the concatenation of multiple PII fields into a single string of text which is passed through a hash and a subsequent cryptographic function. Carduus provides specifications of the tokens proposed in the OPPRL protocol. These tokens are known to have low false positive and false negative match rates for subjects whose PII is close to the distribution found in the United States population, while only relying on a minimal set of PII attributes that are commonly populated in real-world datasets.</p> <p>Some users may want to create tokens by concatenating different PII fields than what is proposed by OPPRL. This is often the case when the datasets of a particular user and the parties they share data with have additional PII beyond what OPPRL leverages that will lead to lower match errors for the sample of subjects used their use case. For a guide on how to extend Carduus with support for additional PII attributes, see this guide</p> <p>To declare a custom token specification, simply instantiate the <code>TokenSpec</code> class provided by Carduus and provide it with a token name and a collection of columns to jointly encrypt.</p> <pre><code>from carduus.token import TokenSpec\n\nmy_token = TokenSpec(name=\"geo_token\", fields=[\"last_name\", \"birth_date\", \"zipcode\"])\n</code></pre> <p>This <code>my_token</code> object can be passed to the <code>tokenize</code> function to replace the PII columns with a <code>geo_token</code> column. If the PII data does not have one or more of the fields referenced by the token definition (after normalization and enhancement) the <code>tokenize</code> function will throw an exception prior to performing any significant workloads.</p>"},{"location":"guides/databricks/","title":"Carduus on Databricks","text":"In\u00a0[0]: Copied! <pre>pii = spark.createDataFrame(\n    [\n        (1, \"Jonas\", \"Salk\", \"male\", \"1914-10-28\"),\n        (1, \"jonas\", \"salk\", \"M\", \"1914-10-28\"),\n        (2, \"Elizabeth\", \"Blackwell\", \"F\", \"1821-02-03\"),\n        (3, \"Edward\", \"Jenner\", \"m\", \"1749-05-17\"),\n        (4, \"Alexander\", \"Fleming\", \"M\", \"1881-08-06\"),\n    ],\n    (\"label\", \"first_name\", \"last_name\", \"gender\", \"birth_date\"),\n)\ndisplay(pii)\n</pre> pii = spark.createDataFrame(     [         (1, \"Jonas\", \"Salk\", \"male\", \"1914-10-28\"),         (1, \"jonas\", \"salk\", \"M\", \"1914-10-28\"),         (2, \"Elizabeth\", \"Blackwell\", \"F\", \"1821-02-03\"),         (3, \"Edward\", \"Jenner\", \"m\", \"1749-05-17\"),         (4, \"Alexander\", \"Fleming\", \"M\", \"1881-08-06\"),     ],     (\"label\", \"first_name\", \"last_name\", \"gender\", \"birth_date\"), ) display(pii) labelfirst_namelast_namegenderbirth_date1JonasSalkmale1914-10-281jonassalkM1914-10-282ElizabethBlackwellF1821-02-033EdwardJennerm1749-05-174AlexanderFlemingM1881-08-06 In\u00a0[0]: Copied! <pre># %pip install carduus\n</pre> # %pip install carduus In\u00a0[0]: Copied! <pre>from carduus.token import tokenize, OpprlPii, OpprlToken\n\ntokens = tokenize(\n    pii,\n    pii_transforms=dict(\n        first_name=OpprlPii.first_name,\n        last_name=OpprlPii.last_name,\n        gender=OpprlPii.gender,\n        birth_date=OpprlPii.birth_date,\n    ),\n    tokens=[OpprlToken.token1, OpprlToken.token2, OpprlToken.token3],\n    private_key=dbutils.secrets.getBytes(\"carduus\", \"PrivateKey\"),\n)\ndisplay(tokens)\n</pre> from carduus.token import tokenize, OpprlPii, OpprlToken  tokens = tokenize(     pii,     pii_transforms=dict(         first_name=OpprlPii.first_name,         last_name=OpprlPii.last_name,         gender=OpprlPii.gender,         birth_date=OpprlPii.birth_date,     ),     tokens=[OpprlToken.token1, OpprlToken.token2, OpprlToken.token3],     private_key=dbutils.secrets.getBytes(\"carduus\", \"PrivateKey\"), ) display(tokens) labelfirst_namelast_namegenderbirth_dateopprl_token_1opprl_token_2opprl_token_31JONASSALKM1914-10-28t+Yg6k4aOm5xMOMjT1nUCVbw1xM6mITKRx/APB+oU0dNo/AN2q/p20Pu2fiKd4wX5iFVK119DJAHYkFJYuI1BxgLBrzkiQKdEJKn1kMzA6k=AWkmGR88bq2Fm/OJpcliqpYxYl43BQETABQT53Y4F8m1nJBnsPJIrQECXjC2qwiX47TI78GHDTuNNu2Sw1r6UAYILDQyFu9swKwcwf99C68=Njlxk7k6GnIHAeV5rK43FOas0JrIB7SYd8xkRRhJikvR+OxYSmpwJyHM5tEc25+srlFOekqx6MTPDMQwUMQ/wxx33ETla7Q3po5Ypjf8Z7g=1JONASSALKM1914-10-28t+Yg6k4aOm5xMOMjT1nUCVbw1xM6mITKRx/APB+oU0dNo/AN2q/p20Pu2fiKd4wX5iFVK119DJAHYkFJYuI1BxgLBrzkiQKdEJKn1kMzA6k=AWkmGR88bq2Fm/OJpcliqpYxYl43BQETABQT53Y4F8m1nJBnsPJIrQECXjC2qwiX47TI78GHDTuNNu2Sw1r6UAYILDQyFu9swKwcwf99C68=Njlxk7k6GnIHAeV5rK43FOas0JrIB7SYd8xkRRhJikvR+OxYSmpwJyHM5tEc25+srlFOekqx6MTPDMQwUMQ/wxx33ETla7Q3po5Ypjf8Z7g=2ELIZABETHBLACKWELLF1821-02-03E4G7QvnP21Q7Wp71rTE7uMWEkB03SrFuJ4rhLBPrAx4IS41dAYLWIRsPeGkzlgmVmYrCa3rrABZPvAsKnUAeE+FHpJhUPacdfDYsBQuGu5I=VTY0gtsgUZoIxfoFXzwchDqFkofPZdylJlszvW8g1OoFXCrpCFzLLxk0SdNkEXTBdNof0lA1Dqk9NPIBOZcW8UfcQjGlb66Jo4TRvc9kXUo=bOTIQg+gcOQ0NToyORzUJrf64oRMlHHRZBQPDueJzHBl1tIzq6l9Y/plH1N9K7Gy3FVSPsqNl+6SWpkgTWKinJKEQLt2wiCVbLgAw86Vc/U=3EDWARDJENNERM1749-05-174wGL1/yszKMjW7E3d2pk5fTcWLAKDp/4Dc03sIL0DG27Cu+QZUYYMf8pIyBwL/6ZMPhmr2X9QsOLTaq05ri09g6zB8HhCDuHUtRavdM0x1w=4j8xonF4Lcu8dpzcKwaw9UD1Lxuz5AcZv/fOnHwZhVifVDsWNEKVvyem3s4zqb8t6WeNSsC/rd6MYWKtZp5uvbq4pnqmC4gf1cwJa1E7dc8=7XIFi7mFqbvKK5NhZHSz6ZWIoL7ZyOP2QtHxSfhwwhThSnfe2deudM5hb+3RAc7r1Osb8wXd4mkqu9zlY1CUHc6HM2eah7TYCGHGTeLgRV0=4ALEXANDERFLEMINGM1881-08-06kxwqjyikxC7WNxuX7cHCZp+Q7XEG5IYuVEshHi4RsyLgjM3lHHhi60Z3v5IpxKznFc+QNdea0S1vUyqyXDcbmzP597l91ZR4da7+cqA2Z4Q=GD/IeZRqsRYWn/D8YfTw4FS+gT6bAM4oPvHlswcrc62n3KBH1ungFhTdHmYZXnOlsTVrFBluxcv5qUNCxDrxMgczN3StZZd+LS9YaSb+fsQ=00MN/EeN8M2ILTLLdgw0qNwjDfyBOROoKZydE05dXlPlv7Y+JVuoOpFdzlSu3KF4gTRhyw8B8qBWO7uwq5wAHS+poqtP/sHf4xqcCZ8WI4Y= In\u00a0[0]: Copied! <pre>from carduus.token import transcrypt_out\n\ntokens_to_send = transcrypt_out(\n    tokens, \n    token_columns=(\"opprl_token_1\", \"opprl_token_2\", \"opprl_token_3\"), \n    recipient_public_key=dbutils.secrets.getBytes(\"carduus\", \"MyPartnerPublicKey\"),\n    private_key=dbutils.secrets.getBytes(\"carduus\", \"PrivateKey\"),\n)\ndisplay(tokens_to_send)\n</pre> from carduus.token import transcrypt_out  tokens_to_send = transcrypt_out(     tokens,      token_columns=(\"opprl_token_1\", \"opprl_token_2\", \"opprl_token_3\"),      recipient_public_key=dbutils.secrets.getBytes(\"carduus\", \"MyPartnerPublicKey\"),     private_key=dbutils.secrets.getBytes(\"carduus\", \"PrivateKey\"), ) display(tokens_to_send) labelfirst_namelast_namegenderbirth_dateopprl_token_1opprl_token_2opprl_token_31JONASSALKM1914-10-28hNdz54DEEC3O5z77Dk4LO9OwzzmB+QfmdxEJNTbE+4e9L0TJmUCQPjOKE6+eezaE2AZtGhiWRlXO3mBN9SvYOa/FNUUUI4GfT199N6w3jz4ngyLS83vraiSRf9yxEi4kt3cSnFmfoHuwuGVgbHoaW2FxxRk5+fBhom8wKZMzJcCMEdcer1O35T6SWUsDb3dXiHTcjZkgMfZuV5RNIBq0M9LMZ68YEURZTxHAUIPXWKxRvVFhCITxWbT4RRI+ipRVU9qdA2yTY2eeeDHQ7Vv5lKAv0iiqr4/UhSEt2Pree6JUy7LrXm7VuE9gpDwpU5ogxgggFWXfVx2s64Vxm6DnPw==g6R1MSIH+LCrwDoZz7LvVP+3ISv37PJbWxZrXJEe9/cvyCUMmRdwrJrYrBEtD7wLh3EQj2Canb8hpMQfkufVvAB+w1gIhbL3hmr4hwNQBGsuPKRn3OM0iuOhu0vaDmRoEoysgiG9oDUHDIkDcrvpWocPCrS1UAhjL726oHFoxf2rIuk//kAloYwM8kNQl9nQ7wwbaDQcCAMKCwf8Vw2YhOC4UVRwaUILeOKcrzkMidRDwl3e7pRVEGxvXalGbw5/IvKUpQVUq+v7gxZ4bMAJxJ6k9yp/9KEfXSnCB4GH02WK8HAyXsZi459bdeZJyrCd4AnbPXiMlXZtRN0V4pc+sg==EG4Fq7eQP9OnsrfwuJSdtDskANrQehuehnPE74y+ujC0O3n5C4gyALfB5qnkhCobmhAwVU0nw81ATla3SX6J+Vo6Jd7VsCq1+8kBp2S/hUz2nLWgKllXw1S2pAcvQhCJdh+8q8Ja0V31IYPzpq9fAMETI5iynYB+ZL312NfsdzjumExfHOcM52ZIJSFlhJPLuogIT800YkgQlZSDQsyj354ELR0J1zIv0h8u4TekiK/kEkfQcxoZsG66JVM5owEgTEUHRLY367K1iC88pXPJBgQbOQM7TrhYyFuKxaaUxfoTQAbaI+4iZzFgTAJ+tXot36fwywZcHOR3mu7uoAb9gA==1JONASSALKM1914-10-28lMZagJJHwlvraYOHzQk6FGQzevFjfRXY3TCuIs5ZVb48qZbBt0vIw30m7BJVIiry/st4qQFFOZa5NUjV2GiawOX4YA3QnJBhuYkznpsilAxITdbWCLKBzFHmxHoumebQZhPijPZnmVrxNAVJcAZT1EaROuQHSBvgiJhZn6YtZMKlmP28/Granhxr8bNEyJTzprqZifgR4YtOZXXH2Pj/z9BfSgXALpyaIPyRlxixXO9U9IOU1ixgw9tOHmMMYZW2DpNZX1lWdmxk1xteBBIgs+UmmrOAR5CCtkdwrF7H1ZpQ5Wi+8KykINoZNmagRMPiZs0361Bvbsw6kA0pTrnAcA==ZWy83+UFc5m7Y8n9qi2SJjm75aOR3QKfp0lcsUFpkh0OyGVlsJNsLNxx00vAyGjTcoRqNX5JVykCven25ITtCfmdqXA3jMdLXc5uI6uYkHuQPHukLfvJCv1y244NNHtdNptCbd5k+6Gbzb1IIqVYg78cTqGzPR27MFyAA1L9OIDONOQZ1l5H9t2KqkEL23638K6lnN8/Rjk/Y803W2iUEsDPItGAP3mdCa0G7G2NhCVI+fN2A0sV1AMwhVCM6ZyOad1xlXnokxC7LtR0eLPemlnbybrEWTYt+3K52sKYeE6fliHPtyiFOVVNs4aZ2/laMB84cCL8JhGJwC0PhIBPYA==WcrfqJx3GPppQkSKjXDTs1PUGrU3323LnInN7mLre4Pdeik8KQnBAN/u9r1ysEKWBbxBDfSwgf/c3dFuWCt8tIhID8wqCA24jNs3xJ1xxtwySa9Ud4JGKZzj5viK4rzWO+SF3xrloraa8h8ETJWb7UwlmcSTmriyDZ3OEem1NFEhgOHfLSc3uJEC4VPbdpl/BPL9ItZlDotrW1SpxbT6noUWC1Ku1SNAqJDew8h/MNQzG8HZZpfqFyeybfZxGGqJaFl+5di/l7jM4pgDVREP7sIMhusq59Nq+zbfSAc0cnNnLLMmW7cTFBJM5v5qWIKxfs7yZ1MToDgEepYGPGnNRw==2ELIZABETHBLACKWELLF1821-02-03aLOYxQ1ckIVtxir4sZ6WVnfgZSdrpXpGb6qW+mmTGqyufPIEFYrhxs/duxnppX/C1xIdQmg2GJSF2SORNuz18KHJGwUkQk65/mH0tCBiJegzWw1TniDI6ibvkmiA0pZNQXNcmha1i32GEehpp/PTL30ICc1iw+L7cSAI2pfKVqpGbXCvkDPi1fBzi6/DAQV7f0K65SyPReXqmGPuzAQdaLd6vfXCAlgN9TdPUgwsK58Qp2AO6hIUEeR2AjxsapgpNdcsLLEaK4N5OTDNeY8lsTFVNzDnUXYZu4RGoyQ9wdugRIFqYknXxyEuYCdVcS5UzATWnNqM5v+R7Zw2Ro35Mw==GBl1ehdA7tZg/C77xSKZ1N3lZkDnmeLZtU3GEi4Pk6lVyuDHONti/g0/mXng0Lpfs4OBvyKwFTdDJbakOXsZR+45ynV3LeWrKuDNdLbViOEQIYtmryIfHAlqJcT3udxCyINn4FHluC3droMBr1jgRHd4xEms/hFRrC82J+XHDd7pSlYV4/9xTXMYwPShW+0jR1Ui5G9JcPR4rats+LdkKH+3W395mtWWzQMzvT9RCWSEvPUS6saV/cNGHWXHrEvf9sbWPiY/R0wzZCqNiLK1GGfCOtXPYPMq2osqGm7FBTSJe0cLI/w07R8oIOkUmvCNpaTTk5t7NvgqS6K5QZg6Ow==IZ4MrE/NRIe8GIaD877eAMY9smtW3rwN0+12K4iLi3mIraVFmZ9+IS2fcY30X7+Pytm1e6S9wIU4iRj1Z7r10LNXWjsDo9itdJUsafWkNhudsDVbqu0DTmU1Ru79O1l+IDCgTThet4GD0MeT/5YAzz3vzFv40kL5EpLUQIBdz8NYEr49lpWecEHxzOL+ISjey1pCJGnrAKJj1FbWCjXWh/RORUlzqgftO5tl5WGkA+dcTJbl6znmQz8pnYn6cyRpZwTQsrVG8mB1Ys6pB8Gw5JrAoeB4IUTX6JuCA+XvbQuONcCsRDC2BSCmqhu5fGPq2IKvwHBcfNwMSHWq2FUmSw==3EDWARDJENNERM1749-05-17Dcg09hNS54EWPqdMYCCXf13tCXHE7i9WF8ikW0lvd8LXz2Udlio6YgtY4jzsSLPq5pYiNMN8CePc0dekHbknFCll4RDs0iPEKvnoOYlX571bZZS3D1rfCfR+susRxk2xtrD7Lhm1pvDMcTae+9KtGfXaoVDLbj0m3ydhNx1VCmp+KlUBiScQzhL1JnHaR/aUJRwjJH/Sz/6s6RtgD93mqBBI/F5m0JODrWhgz0AC7Kicc6OCMBXnNsLoP5uIVqstuo4s5mgQiZQ9K5wSxERuyBlG1sv54wM4oWooY2o+bxIm548oP5ozyP4X9RNb+VjNRL50Q0ELOWtbGdADo+NetA==fKXXyvxzghqNQYoac6lDH3KbhRJ/jEvjy1SmsueXVJBXH3HyCQQDzE8Ur+uAnmhC7x04lvRyaVDri5ePX0Gu4KS9lAxpQ7/VfKbTd9qlXU391b19UyCplANqKMyKdQxgz70NT+hntojMYwYnaZLlai1xl7UklWE+1NeVtcxokc5H75c63XgA5bsDlyyS+CtxSrPLhEy5/hKAe9ZdeAj6l+pDQtiSEvN5XTY4M69JMOnXXSTogi5EGi4FUg4ljnyI9DsdCqjSGmsybFpoJmRUGVn+PU7F2wabbcFzsRtNQDGU2ygbdiGjOub3YiUmWmDVDbaXLniY/ApTlJ4MP/Uemw==LHPsumEbKMhs0nDxk92S0iFyZWkKOGEHLX2HjqoMEMHOfuEk54+o0YNcqJO/W8jzpprl/5cYvVZoa8wMNC0FSwcNRU81uYZ2fJcaT6BM8EIZg9INKuOMjpcJ8gwKfNbm/YYrEijq9WQLEY9feii51l9vxzKipu/uGN6d6vtzmW2lTaYVVrisNr1jFXDvsEIeUv2nzWM2wcTqGu0tX3Zgb9QcX8w9+6qRlP/e1KqbVwk9HsuP+ngWp+6KwQCH1NH2r9oBHohQb7XG7yDL5ILy/e69XT1SAaAR+eQdgQlIv6POhNfyFFzZ+w9K1Jtd9q/h833jik3JIaDTm/ETXwiebw==4ALEXANDERFLEMINGM1881-08-06f6ff/fv7QSL+B/UO6DpNzqBhqwKHeAYw0L8md4nbBJpTwCTO6Kiak+ixXYG0VlaIMMEZdSqdbgm91rNaUeC4VfGLfA3B+7ukUSg+G6IYpWqJM2Sj/iPpwuiW57GTiyPExCjzr6kDaDO+B88tW6sKpbI7RE3N9a+ubUhqejZAYGiSoXuQnhLZMXucVB2+mpgu9q77Ej0sXWWLLcvc6JvaEC/wQ4weIvN5k1FtPlAiia2/4wikxM02mS4W+aG3c4AfnAkpvfgpHhYe4lNQ5J606KWFlzJTZQT/WPSft6EYThCis2OwDe6WGAAaqdZXg6bIERNMnVecGT81J92+XBSfUA==LSHgLR9modpKVJC0ZKk5Ia9ZhxJhewQgznRC6e4g+BKwRr6XxRfNWZAKq7ncIwEvioeOn/9SWIxGhgKxBafdzsS40sNs7+wViXFLZnraRVg5R4PiGhJTB9b+tuZ+MLSMSLwB7zqGoKNx7s7q+y3OprHpRyHRHd9c+UgjeM2GsRBsFYiR/prgyzOAeZBXud5Md1ys/QyHPSkMDl41PI08CLpkpOhV7ODG7nvF77r4oC2rpluSA9/iuZiB0wTlr9N0cz9VkwMR4PyL8f1TOGIS3aktp3AhKPXYhVQS/YhhIyaeSjpOFtgoKnrPI5aoaCSsc0NubZfIyZzKIn8tWhyGWQ==nD9Iu5aTtPEQg7V/Je9BBHZ+VYYyABQfQsspy2uCOBF5sbrKUITCgme+hLCR8Wu0LqNOcQYM1O57Mv/mk+bkGPezkI4WZAy2alO96nVnvUpMNjHZMmWghyP0Xd/8s+blx/iMVWRvf4YC0RYKugcJz2H+cnLkecq1Og1O80s95T4CP1gMSWp18zNsV3HAOKI40fJoBJDMT6H3220P7aEUMZ4N3hctBX2K9ka8mmOCRFc1KqQQ2gx/lTglctUG8daisMqSotJCrq1rczTKq6c6ZZTjl3cvpW7DyRXqKzD8tiP4wgNrccV7+ZANVdviVDovkp+1Umzja5wb7yutD5V29Q== In\u00a0[0]: Copied! <pre>from carduus.token import transcrypt_in\n\ntokens2 = transcrypt_in(\n    tokens_to_send, \n    token_columns=(\"opprl_token_1\", \"opprl_token_2\", \"opprl_token_3\"),\n    private_key=dbutils.secrets.getBytes(\"carduus\", \"OrgBPrivateKey\"),\n)\ndisplay(tokens2)\n</pre> from carduus.token import transcrypt_in  tokens2 = transcrypt_in(     tokens_to_send,      token_columns=(\"opprl_token_1\", \"opprl_token_2\", \"opprl_token_3\"),     private_key=dbutils.secrets.getBytes(\"carduus\", \"OrgBPrivateKey\"), ) display(tokens2) labelfirst_namelast_namegenderbirth_dateopprl_token_1opprl_token_2opprl_token_31JONASSALKM1914-10-28n6YNZapNFyiP3rPO6JmlNZnxfz4PL9lfn3IOoERk9cSLe2w91EDdKHL+nNgZ60SzeRQzcM3nHDRQevzOfkFLf4dJTJg+8uLtcqHa3sHn0D4=gcbO8zyzdiMsWiWrChcskBcPHJ4z04CmZ4DrY+V20n6XaSpq8mJQ41um85gwSEcoOdIYE2ucFPn9mf3QKmNnBrRTYoA1q9KkSWK/Z6etbMg=AaGOVbbebDiOSq/lMVORAyeEHf8RcfrvPF7SCNei1wcSK7IJph22uxOPnfmmNNpAwzo9Q6Tr8XYOXwxgOYY7JG6NcX9O/1qVSGvEq3wb17E=1JONASSALKM1914-10-28n6YNZapNFyiP3rPO6JmlNZnxfz4PL9lfn3IOoERk9cSLe2w91EDdKHL+nNgZ60SzeRQzcM3nHDRQevzOfkFLf4dJTJg+8uLtcqHa3sHn0D4=gcbO8zyzdiMsWiWrChcskBcPHJ4z04CmZ4DrY+V20n6XaSpq8mJQ41um85gwSEcoOdIYE2ucFPn9mf3QKmNnBrRTYoA1q9KkSWK/Z6etbMg=AaGOVbbebDiOSq/lMVORAyeEHf8RcfrvPF7SCNei1wcSK7IJph22uxOPnfmmNNpAwzo9Q6Tr8XYOXwxgOYY7JG6NcX9O/1qVSGvEq3wb17E=2ELIZABETHBLACKWELLF1821-02-03jSXy3EODCctLC6bYmp4PLwTyvIlruiSHVJG+PzkrffKsypBII409DuMDq+20mCoQIOnqZXqChkUNhrqiKPQX+E3wfFQWiJSEPk/HlHYKH7U=w1XiSj7vz4R68DpkQxMqSfFikQvylx3ZPrOoBQWBH3CypDgShSmw+6tC5Ows+hKVZkan+13letcC4u8ifO612dlg63hYZ/ONfTSGevD14ao=5Fk8udPfGm44jIDkFbhRJYIQnG4jjgpMhygEX7eHacpy1fCnuOMJB/5IP87570eISwYWqsRSuDna8iRqywrj8KTiVbMoY7p8Mg7Je3uFGKY=3EDWARDJENNERM1749-05-175etiSY9RzaVmpefeRGR0ajR08O6aez6ZrJUoAKrfIrNzOPHLAQqi4tXIp+4kvIhp4YygsXjleWirtfs8hbl0fwFWeGQ4vUBBsXUY0jG8MlU=WJ340Z+/qZy/5yTvABqJMYgrkTzZtXdHmKW/OduRiIpidBgVF8iijUfi/+M8nOKnUkgFbsCrqFtI57XP5GNuAvFmptyRS6EqPbOupF8PcNE=xnR2qS0zGdfBZrmBomMJezAPv/UYCQdpW0nFV7KiZotpYG5Q/d9EK5Ew27SaFP2dJNNVCwCEXCV+jM+RBXIuMnxbVWvy8FjPODx3UR5Qrrg=4ALEXANDERFLEMINGM1881-08-06tfhWByB2vs7mTwVf1xQZ7n4KVf9U9JqdeINK6DJtMj/7msCQVAljCH+X58pbdjLfMDZlrMHZtiVjpl5i9nfrcj/iou5IClUnycIhupaT8JM=wBgFLcQj/QwyWe7YXrnHvNXoMQvNOmaBFi6q0gMbVSuO1f8xQk8fXoBN18/SH50amlmLs+4GV1eYatY+rvVEFVb4RJMSds91ZH/yjyLIkTw=/OfhKKqUTgAS+vABrSVG9sW0CrpiJmHDkWQ9fTOBAKASwsY9IDnBufIoKSs3SXjr24rYBvdFWMLZWAGfVukz91/yy39MsgeX7MJERxHigAQ= In\u00a0[0]: Copied! <pre>\n</pre>"},{"location":"guides/databricks/#carduus-databricks-getting-started-guide","title":"Carduus Databricks Getting Started Guide\u00b6","text":"<p>Carduus is an implementaiton of the Open Privacy Preserving Record Linkage (OPPRL) specification. It allows organizations to replace personally identifiable information (PII) with enrypted tokens that can be used to correlate data records pertaining to the same subject while keeping the subject anonymous.</p> <p>This notebook demonstrates the use of the <code>carduus</code> python package in databricks to parallelize the tokenization processes using Spark clusters.</p> <p>The following is a 5 row sample dataset of PII that will be tokenized. Notice that despite cosmetic differences the first 2 rows (label = 1) are describing the same subject and will receive the same sets of token values.</p>"},{"location":"guides/databricks/#one-time-workspace-setup","title":"One-time Workspace Setup\u00b6","text":"<p>See the Databricks documenation for managing secrets to get started. You will need an to install the Databricks CLI and authenticate as a user that can manage Databricks secrets.</p> <p>Create a secret scope for <code>carduus</code> encryption keys by running the following command with the Databricks CLI.</p> <pre><code>databricks secrets create-scope carduus\n</code></pre> <p>Add your private key as a secret in the <code>carduus</code> scope.</p> <pre><code>(cat &lt;&lt; EOF\n-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\nEOF\n) | databricks secrets put-secret carduus PrivateKey\n</code></pre> <p>Add the secrets for the public keys of the third party organiations you will be sending and receiving tokenized data to/from.</p> <pre><code>(cat &lt;&lt; EOF\n-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----\nEOF\n) | databricks secrets put-secret carduus MyPartnerPublicKey\n</code></pre>"},{"location":"guides/databricks/#cluster-setup","title":"Cluster Setup\u00b6","text":"<p>Add spark configuration properties to your custer by reading from the secrets created above. Your organization's private key must be stored under the <code>carduus.token.privateKey</code> key and all third party public keys must be stored under a key with the format <code>carduus.token.publicKey.&lt;profile&gt;</code> where <code>&lt;profile&gt;</code> is the name you would like to associate with a specific partner.</p> <pre><code>carduus.token.privateKey {{secrets/carduus/PrivateKey}}\ncarduus.token.publicKey.MyPartner {{secrets/carduus/MyPartnerPublicKey}}\n</code></pre>"},{"location":"guides/databricks/#install-carduus","title":"Install carduus\u00b6","text":"<p>You can install <code>carduus</code> on your cluster, or within the notebook. See the Databricks docs for more information.</p>"},{"location":"guides/databricks/#tokenization-of-pii","title":"Tokenization of PII\u00b6","text":""},{"location":"guides/databricks/#transcrypt-tokens-as-sender","title":"Transcrypt Tokens As Sender\u00b6","text":"<p>trans- (latin: across) -crypt (greek: hidden, secret)</p> <p>The OPPRL specification also provides procedures for facilitating the safe transfer of data between trusted parties without a secure connection.</p> <p>The process of Transcryption is the re-encrypting of data from one scheme to another without reversing the initial encryption to recover the PII. When the sender transcrypts their tokens, the token values of the records no longer match to the sender's data and records within the data being shared no longer match with eachother regardless of the underlying PII.</p> <p>Notice that the first 2 records pertaining to the same subject (label = 1) no longer have identical tokens.</p>"},{"location":"guides/databricks/#transcrypt-tokens-as-recipient","title":"Transcrypt Tokens As Recipient\u00b6","text":"<p>When receiving the data with transcrypted tokens, the recepiant must call a function to re-encrypt the tokens again so that they match with the rest of the tokens across their data assets.</p> <p>For this demonstration, we will load the encryption key our hypothetical recipient and provess the transcrypted tokens we created above.</p> <p>Notice that the first 2 records pertaining to the same subject (label = 1) have identical tokens again, but do these tokens are not the same as the orgional tokens because they are encrypted with the scheme for the recipient.</p>"},{"location":"guides/getting-started/","title":"Getting Started","text":"<p>This guide provides a quick tour of the main features of Carduus, including instructions for how most users will be interacting with the library.</p> <p> Carduus has not reached a v1.0 release yet and therefore the API and behaviors are subject to change. Use at your own risk! See the contributing guide if you would like to help the project.</p>"},{"location":"guides/getting-started/#installation","title":"Installation","text":"<p>Carduus is a cross-platform python library built on top of PySpark. It supports the following range of versions:</p> <ul> <li>Python: 3.10+</li> <li>PySpark: 3.5+</li> </ul> <p>The latest stable release of carduus can be installed from PyPI into your active Python environment using <code>pip</code>.</p> <pre><code>pip install carduus\n</code></pre> <p>You can also build Carduus from source using Poetry. The source code is hosted on Github. Checkout the commit you wish to build and run  <code>poetry build</code> in the project's root.</p>"},{"location":"guides/getting-started/#encryption-keys","title":"Encryption Keys","text":"<p>Carduus's tokenization capabilities require the use of private and public encryption keys. Carduus users are expected to manage their own encryption keys.</p> <p>There are 3 kinds of encryption keys that play different roles:</p> <ol> <li>Your private RSA key - Used to transcrypt incoming data and derive a symmetric encryption key used to tokenize PII. This key must never be shared or accessed by untrusted parties.</li> <li>Your public RSA key - The public key counterpart to your private key. Will be shared with trusted parties that will be sending you tokenized data.</li> <li>Trusted partner public keys - A collection of public keys from the various trusted parties that you will be sending tokenized to.</li> </ol>"},{"location":"guides/getting-started/#generating-new-keys","title":"Generating New Keys","text":"<p>Carduus expects encryption keys to be represented the PEM encoding. Private keys should use the PKCS #8 format and public keys should be formatted as SubjectPublicKeyInfo. Carduus recommends a key size of 2048 bits.</p> <p>You can generate these keys using tools like <code>openssl</code> or by calling the <code>generate_pem_keys</code> function provided by Carduus. This function will return a <code>tuple</code> containing 2 instances of <code>bytes</code>. The first is the PEM data for your private key that you must keep secret. The second is the PEM data for your public key that can may share with the parties you intend to receive data from.</p> <p>You can decode these keys into strings of text (using UTF-8) or write them into a <code>.pem</code> file for later use. </p> <pre><code>from carduus.keys import generate_pem_keys\n\nprivate, public = generate_pem_keys()  # Or provide key_size= \n\nprint(private.decode())\n# -----BEGIN PRIVATE KEY-----\n# ... [ Base64-encoded private key ] ...\n# -----END PRIVATE KEY-----\n\nprint(public.decode())\n# -----BEGIN PUBLIC KEY-----\n# ... [ Base64-encoded public key ] ...\n# -----END PUBLIC KEY-----\n</code></pre>"},{"location":"guides/getting-started/#tokenization","title":"Tokenization","text":"<p>Tokenization refers to the process of replacing PII with encrypted tokens using a one-way cryptographic function. Carduus implements the OPPRL tokenization protocol, which performs a standard set of PII normalizations and enhancements such that records pertaining to the same subject are more likely to receive the same token despite minor differences in PII representation across records. The OPPRL protocol hashes the normalized PII and then encrypts the hashes with a symmetric encryption based on a secret key derived from your private RSA key. In the event that the private encryption key of one party is compromised, there risk to all other parties is mitigated by the fact that everyone's tokens are encrypted with a different key.</p> <p>To demonstrate the tokenization process, we will use a dataset of 5 records shown below. Each record is assigned a <code>label</code> that corresponds to the true identity of the subject.</p> <pre><code>pii = spark.createDataFrame(\n    [\n        (1, \"Jonas\", \"Salk\", \"male\", \"1914-10-28\"),\n        (1, \"jonas\", \"salk\", \"M\", \"1914-10-28\"),\n        (2, \"Elizabeth\", \"Blackwell\", \"F\", \"1821-02-03\"),\n        (3, \"Edward\", \"Jenner\", \"m\", \"1749-05-17\"),\n        (4, \"Alexander\", \"Fleming\", \"M\", \"1881-08-06\"),\n    ],\n    (\"label\", \"first_name\", \"last_name\", \"gender\", \"birth_date\")\n)\npii.show()\n# +-----+----------+---------+------+----------+\n# |label|first_name|last_name|gender|birth_date|\n# +-----+----------+---------+------+----------+\n# |    1|     Jonas|     Salk|  male|1914-10-28|\n# |    1|     jonas|     salk|     M|1914-10-28|\n# |    2| Elizabeth|Blackwell|     F|1821-02-03|\n# |    3|    Edward|   Jenner|     m|1749-05-17|\n# |    4| Alexander|  Fleming|     M|1881-08-06|\n# +-----+----------+---------+------+----------+\n</code></pre> <p>To perform tokenization, call the <code>tokenize</code> function and pass it the PII <code>DataFrame</code>, a column mapping, and a collection of specifications for token you want to generate. You may optionally pass an instance of <code>EncryptionKeyProvider</code>, but all code snippets shown in this guide assume the default key service is used (unless otherwise specified) and therefore encryption keys will be read from the spark session properties.</p> <pre><code>from carduus.token import tokenize, OpprlPii, OpprlToken\ntokens = tokenize(\n    pii,\n    pii_transforms=dict(\n        first_name=OpprlPii.first_name,\n        last_name=OpprlPii.last_name,\n        gender=OpprlPii.gender,\n        birth_date=OpprlPii.birth_date,\n    ),\n    tokens=[OpprlToken.token1, OpprlToken.token2],\n    private_key=b\"\"\"-----BEGIN PRIVATE KEY----- ...\"\"\",\n)\n# +-----+--------------------+--------------------+\n# |label|       opprl_token_1|       opprl_token_2|\n# +-----+--------------------+--------------------+\n# |    1|d2tUj3yRFPIBSwR/n...|DQhKG+AMgrFh16dLi...|\n# |    1|d2tUj3yRFPIBSwR/n...|DQhKG+AMgrFh16dLi...|\n# |    2|2wnRWhN9Y4DBMeuvw...|A7fUKAZi/Ra2T6p8y...|\n# |    3|I17X+CT3kjqB9l0rA...|qGCUVyI7MJLkQ9SSr...|\n# |    4|6Ee3NabHaa/lyKsrp...|dbwNqy0rN6hFoHJYn...|\n# +-----+--------------------+--------------------+\n</code></pre> <p>Notice that both records with <code>label = 1</code> received the same pair of tokens despite slight representation differences in the original PII.</p> <p>The <code>pii_transforms</code> argument is a dictionary that maps column names from the <code>pii</code> DataFrame to the corresponding OPPRL PII field. This tells Carduus how to normalize and enhance the values found in that column. For example, the <code>OpprlPii.first_name</code> object will apply name cleaning rules to the values found in the <code>first_name</code> column and automatically derive additional PII columns called <code>first_initial</code> and <code>first_soundex</code> which are used to create both OPPRL tokens.</p> <p>The <code>tokens</code> argument is collection of OPPRL token specifications that tell Carduus which PII fields to jointly hash and encrypt to create each token. The current OPPRL protocol supports three token specifications, described below:</p> Token Fields to jointly encrypt <code>OpprlToken.token1</code> <code>first_initial</code>, <code>last_name</code>, <code>gender</code>, <code>birth_date</code> <code>OpprlToken.token2</code> <code>first_soundex</code>, <code>last_soundex</code>, <code>gender</code>, <code>birth_date</code> <code>OpprlToken.token3</code> <code>first_metaphone</code>, <code>last_metaphone</code>, <code>gender</code>, <code>birth_date</code> <p> Why multiple tokens? </p> <p>Each use case has a different tolerance for false positive and false negative matches. By producing multiple tokens for each record using PII attributes, each user can customize their match logic to trade-off between different kinds of match errors. Linking records that match on any token will result in fewer false negatives, and linking records that match all tokens will result in fewer false positives. User can design their own match strategies by using subsets of tokens.</p>"},{"location":"guides/getting-started/#transcryption","title":"Transcryption","text":"<p> noun: trans- (latin: across) -crypt (greek: hidden, secret)</p> <p>The process of transforming a ciphertext produced by one encryption into a ciphertext of a different encryption without emitting the original plaintext.</p> <p>Transcryption is performed when a user wants to share tokenized data with another party. The sender and recipient each have a corresponding transcryption function that must be invoked to ensure safe transfer of data between trusted parties. The sender performs transcryption to replace their tokens with \"ephemeral tokens\" that are specific to the transaction. In other words, the ephemeral tokens do not match the sender's tokens, the recipients data, or the ephemeral tokens from prior transactions between any sender and recipient. </p> <p>Furthermore, records from the same dataset that have identical PII will be assigned unique ephemeral tokens. This destroys the utility of the tokens until the recipient performs the reverse transcryption process using their private key. This is beneficial in the event that a third party gains access to the dataset during transfer (eg. an if transcrypted datasets are delivered over an insecure connection) because records pertaining to the same subject cannot be associated with each other.</p>"},{"location":"guides/getting-started/#sender","title":"Sender","text":"<p>Carduus provides the <code>transcrypt_out</code> function in for the sender to call on their tokenized datasets. In the following code snippet, notice the 2 records pertaining to the same subject (<code>label = 1</code>) no longer have identical tokens. The <code>tokens_to_send</code> DataFrame can safely be written files or a database and delivered to the recipient.</p> <pre><code>tokens_to_send = transcrypt_out(\n    tokens, \n    token_columns=(\"opprl_token_1\", \"opprl_token_3\"), \n    recipient_public_key=b\"\"\"-----BEGIN PUBLIC KEY----- ...\"\"\".\n    # THis is the private key of the sender\n    # It is NOT the private key associated with the recipient_public_key.\n    private_key=b\"\"\"-----BEGIN PRIVATE KEY----- ...\"\"\",\n)\ntokens.to_send.show()\n# +-----+--------------------+--------------------+\n# |label|       opprl_token_1|       opprl_token_3|\n# +-----+--------------------+--------------------+\n# |    1|IL17HgISJv5ol+ftJ...|YPnfuGBBhbOZChlhR...|\n# |    1|IVwfYY0dbmFc6cf0/...|jF8N2HYEYPr5lFSSx...|\n# |    2|I5Oe3oC0heF8L+Zcy...|BkBPzMDXeKlprUd8l...|\n# |    3|dOQtYZZV8j/E6wGMB...|FU6MbMjsU8WrJoiXa...|\n# |    4|N0VzhvFHrTtWNt+P7...|jvbFTWbmBzB06lDpv...|\n# +-----+--------------------+--------------------+\n</code></pre> <p>The <code>token_columns</code> argument is a iterable collection containing the column names of the <code>tokens</code> DataFrame that correspond to tokens that need to be transcrypted.</p> <p>The <code>recipient</code> argument denotes the name given to the public key associated with the intended recipient. If using the default encryption key provider (via Spark session properties) the above code snippet will grab the public key from <code>carduus.token.publicKey.AcmeCorp</code> spark session property.</p>"},{"location":"guides/getting-started/#recipient","title":"Recipient","text":"<p>The <code>transcrypt_in</code> function provides the transcryption process for the recipient. It is called on a dataset produced by the sender using <code>transcrypt_out</code> to convert ephemeral tokens into normal tokens that will match other tokenized datasets maintained by the recipient, including prior datasets delivered from the same sender.</p> <p>Notice that the first 2 records pertaining to the same subject (label = 1) have identical tokens again, but do these tokens are not the same as the original tokens because they are encrypted with the scheme for the recipient.</p> <pre><code>from carduus.token import transcrypt_in\n\ntokens_received = transcrypt_in(\n    tokens_to_send, \n    token_columns=(\"opprl_token_1\", \"opprl_token_3\"),\n    # This is the private key corresponding to the public key used to the prepare the data.\n    # It is NOT the private key used to tokenize the PII.\n    private_key=b\"\"\"-----BEGIN PRIVATE KEY----- ...\"\"\",\n)\ntokens_received.show()\n# +-----+--------------------+--------------------+\n# |label|       opprl_token_1|       opprl_token_3|\n# +-----+--------------------+--------------------+\n# |    1|O47siK/9rItAv6lwa...|uoPojmvjl3Mk734Ul...|\n# |    1|O47siK/9rItAv6lwa...|uoPojmvjl3Mk734Ul...|\n# |    2|LfRQxBPEW0tEskwxt...|P9PLhpSz+kWSSVmYQ...|\n# |    3|QWvpT0wMEezlurVFM...|W9BxmxZf1/yqIDx3W...|\n# |    4|aS/BfI5qw8UnhOWUX...|nWfWyxQcrSfeiMEHr...|\n# +-----+--------------------+--------------------+\n</code></pre> <p>As with <code>transcrypt_out</code>, the <code>token_columns</code> argument is a iterable collection containing the column names of the <code>tokens</code> DataFrame that correspond to tokens that need to be transcrypted. </p> <p>The <code>key_service</code> argument overrides the default key provider with our Acme Corp keys. The <code>tokenize</code> and <code>transcrypt_out</code> functions also have this parameter.</p>"},{"location":"guides/getting-started/#deployment","title":"Deployment","text":"<p>Carduus is a Python library that uses PySpark to parallelize and distribute the tokenization and transcryption workloads. Your application that uses Carduus can be submitted to any compatible Spark cluster, or use a connection to a remote spark cluster. Otherwise, Carduus will start a local Spark process that uses the resources of the host machine.</p> <p>For more information about different modes of deployment, see the official Spark documentation.</p> <ul> <li>Submitting Applications to a Spark cluster</li> <li>Spark Connect</li> <li>Spark Standalone Mode</li> </ul>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Reference the full API</li> <li>Learn more about using Carduus and extending it's functionality from the advanced user guides:<ul> <li>Using Carduus on Databricks</li> <li>Defining custom token specifications</li> <li>Adding support for custom PII attributes</li> </ul> </li> </ul>"},{"location":"opprl/PROTOCOL/","title":"OPPRL Protocol","text":"<p> Warning!   This specification is incomplete. Many sections are missing and the existing details may change. If you are interested in contributing to the specification, see the Contributing Guide</p>"},{"location":"opprl/PROTOCOL/#overview","title":"Overview","text":"<p>This document is a specification for the Open Privacy Preserving Record Linkage (OPPRL) protocol, which brings ______. This capability is often refered to as \"tokenization\".  The protocol is designed with the following goals:</p> <ul> <li>Interoperability - Implementations can be created in many data systems while </li> <li>Security - Carefully selected encryption algorithms are used at each point in the process to mitigate any chance of catastrophic failure or information leakage.</li> <li>Decentralization - No trusted third parties are needed to act as centralized authories. No single point of failure.</li> <li>Scalability - Tokenization is an embarrassingly parallel task that should scale efficently to billions of records.</li> </ul> <p>Privacy Preserving Record Linkage (PPRL) is crucial component to data de-identification systems. PPRL obfuscate identifying attributes or other sensitive information about the subjects described in the records of a dataset while still preserving the ability to link records pertaining to the same subject through the use of an encrypted token. This practice is sometimes referred to as \"tokenization\" and is one of the components of data deidenfication.</p> <p>The task of PPRL is to replace the attributes of a every record denoting Personally Identifiable Information (PII) with a token produced by a one-way cryptographic function. This prevents observers of the tokenized data from obtaining the PII. The tokens are produced deterministically such that input records with the same, or similar, PII attributes will produce an identical token. This allows practitioners to associate records across datasets that are highly likely to belong to the same data subject without having acces to PII.</p> <p>Tokenization is also used when data is shared between organizations to limit, or in some cases fully mitigate, the risk of subject re-identification in the event that an untrusted third party gains access to a dataset containing sensitive data. Each party produced encrypted tokens using a different secret key so that any compromised data asset is, at worst, only matchable to other datasets mantained by the same party. During data sharing transactions, a specific \"transcryption\" data flow is used to first re-encrypt the sender's tokens into ephemeral tokens that do not match tokens in any other dataset and can only be ingested using the receipiants secret key. At no point in the \"transcryption\" data flow is the orginoal PII used.</p>"},{"location":"opprl/PROTOCOL/#glossary","title":"Glossary","text":"Term Definition Data Asset A collection of records with attributes. Can be a single dataset, or a collection of related datasets. Subject A person who is being decribed by one or more recoreds in a data asset. PPRL attempts to obfuscate the identity of the subject. Attribute A single field of a record denoting one piece of information about the subject. PII Personally Identifying Information. Attributes of a data asset that can be used to determine the identity of a subject. Examples include name, residential address, gender, age, phone number, email, as well as other demographic or socio-ecominic attributes. Token An string of text derived deterministically by a one-way cryptographic function. Implementer An individual or organization that creates a software tool that implements this specification. User The end user of an OPPRL implementation. Custodian An individual or organization in possession of a data asset. Receipient An individual or organization that receives a data asset from a custodian."},{"location":"opprl/PROTOCOL/#encryption-keys","title":"Encryption Keys","text":"<p>Every user of an OPPRL implementation must have asymmetric encryption key pair consisting of a public key and corresponding private key. The public key is not secret and can be shared with parties that the user intends to share data with. A custodian will use the public key of a specific receiptiant to encrypt ephemeral tokens that can only be decrypted by the receiptiant using their private key.</p> <p>Implementers may choose any asymettric encryption algorithm that is sufficiently safe, however users must </p> <p>The private key is also used to derive a third encryption key via a hash function. This key is a random </p>"},{"location":"opprl/PROTOCOL/#tokenization","title":"Tokenization","text":""},{"location":"opprl/PROTOCOL/#normalization","title":"Normalization","text":""},{"location":"opprl/PROTOCOL/#enhancement","title":"Enhancement","text":""},{"location":"opprl/PROTOCOL/#tokens","title":"Tokens","text":"Token Fields 1 First initial, Last name, Gender, Birth date 2 First soundex, Last soundex, Gender, Birth date"},{"location":"opprl/PROTOCOL/#transcryption","title":"Transcryption","text":""},{"location":"opprl/PROTOCOL/#sender","title":"Sender","text":""},{"location":"opprl/PROTOCOL/#receipiant","title":"Receipiant","text":""},{"location":"opprl/contrib/","title":"Contributing to the OPPRL Protocol","text":"<p> This specification is incomplete.</p>"},{"location":"opprl/contrib/#contributing-opprl-evaluation-data","title":"Contributing OPPRL Evaluation Data","text":"<p>Post on the discussion board in the OPPRL section. </p>"},{"location":"opprl/contrib/#contributing-research","title":"Contributing Research","text":"<p>Post on the discussion board in the OPPRL section. </p>"},{"location":"opprl/contrib/#proposing-changes","title":"Proposing Changes","text":"<p>Open a PR to spec document in the Carduus repository.</p>"},{"location":"opprl/spec/","title":"OPPRL v0.1 Specification","text":"<p> Warning</p> <p>This specification is incomplete and actively being written collaboratively in the open. Many sections are missing and the specifics may change dramatically.</p> <p>If you would like to join </p> <p>Authors of OPPRL implementations should expect breaking changes, and interoperability between implementation cannot be guarenteed until an official version 1.0 is published.</p> <p>Privacy Preserving Record Linkage (PPRL) is crucial component to data de-identification systems. PPRL obfuscate identifying attributes or other sensitive information about the subjects described in the records of a dataset while still preserving the ability to link records pertaining to the same subject through the use of an encrypted token. This practice is sometimes referred to as \"tokenization\" and is one of the components of data deidenfication.</p> <p>The task of PPRL is to replace the attributes of a every record denoting Personally Identifiable Information (PII) with a token produced by a one-way cryptographic function. This prevents observers of the tokenized data from obtaining the PII. The tokens are produced deterministically such that input records with the same, or similar, PII attributes will produce an identical token. This allows practitioners to associate records across datasets that are highly likely to belong to the same data subject without having acces to PII.</p> <p>Tokenization is also used when data is shared between organizations to limit, or in some cases fully mitigate, the risk of subject re-identification in the event that an untrusted third party gains access to a dataset containing sensitive data. Each party produced encrypted tokens using a different secret key so that any compromised data asset is, at worst, only matchable to other datasets mantained by the same party. During data sharing transactions, a specific \"transcryption\" data flow is used to first re-encrypt the sender's tokens into ephemeral tokens that do not match tokens in any other dataset and can only be ingested using the receipiants secret key. At no point in the \"transcryption\" data flow is the orginoal PII used.</p>"},{"location":"opprl/spec/#about-this-specification","title":"About this specification","text":"<ul> <li>SemVer</li> </ul>"},{"location":"opprl/spec/#glossary","title":"Glossary","text":"<ul> <li>Data Asset: A collection of records with attributes. Can be a single dataset, or a collection of related datasets.</li> <li>Subject: A person who is being decribed by one or more recoreds in a data asset.</li> <li>PII: Personally Identifying Information. Attributes of a data asset that can be used to determine the identity of a subject. Examples include name, residential address, gender, age, phone number, email, as well as other demographic, socio-ecominic, and </li> <li>Token: An arbitrary string of text derived deterministically from PII that can be used to identify records pertaining the same subject. Tokens provide nearly no information about the underlying PII they are generated from and thus can be used to replace PII in a data asset</li> </ul>"},{"location":"opprl/spec/#1-tokenization","title":"1 Tokenization","text":"<p>Convertion of PII attributes into tokens.</p>"},{"location":"opprl/spec/#requirements","title":"Requirements","text":""},{"location":"opprl/spec/#11-data-flow","title":"1.1 Data Flow","text":"<p>Inputs:</p> <ol> <li>An AES encryption key unique to data asset.</li> <li>PII Transformations</li> <li>Token specificaitnos.</li> </ol>"},{"location":"opprl/spec/#111-normalization","title":"1.1.1 Normalization","text":""},{"location":"opprl/spec/#112-enhancement","title":"1.1.2 Enhancement","text":""},{"location":"opprl/spec/#113-fragmentation","title":"1.1.3 Fragmentation","text":""},{"location":"opprl/spec/#114-hashing","title":"1.1.4 Hashing","text":""},{"location":"opprl/spec/#115-encryption","title":"1.1.5 Encryption","text":""},{"location":"opprl/spec/#116-base64-encoding","title":"1.1.6 Base64 Encoding","text":""},{"location":"opprl/spec/#2-transcyption","title":"2 Transcyption","text":"<p>The re-encryption of tokens for the purpose of safely delivering tokenized data between parties.</p> <p>Ephemeral tokens.</p>"},{"location":"opprl/spec/#requirements_1","title":"Requirements","text":""},{"location":"opprl/spec/#21-sender-data-frow","title":"2.1 Sender Data Frow","text":"<p>Inputs:</p> <ol> <li>The AES encryption key used to encrypt the PII hashes.</li> <li>The public RSA key of the receiver.</li> </ol> <p>The entire data flow must be performed by the sender with no malicious observers intercepting intermediate values.</p>"},{"location":"opprl/spec/#211-decode-base64","title":"2.1.1 Decode Base64","text":""},{"location":"opprl/spec/#212-aes-decryption","title":"2.1.2 AES Decryption","text":""},{"location":"opprl/spec/#213-rsa-encryption","title":"2.1.3 RSA Encryption","text":""},{"location":"opprl/spec/#214-encode-base64","title":"2.1.4 Encode Base64","text":""},{"location":"opprl/spec/#22-receiver-data-flow","title":"2.2 Receiver Data Flow","text":"<p>Inputs:</p> <ol> <li>The private RSA key of the receiver. It must corresponds to the public key used by the sender.</li> <li>An AES encryption key unique to the receiver.</li> </ol>"},{"location":"opprl/spec/#221-decode-base64","title":"2.2.1 Decode Base64","text":""},{"location":"opprl/spec/#222-rsa-decryption","title":"2.2.2 RSA Decryption","text":""},{"location":"opprl/spec/#223-aes-encryption","title":"2.2.3 AES Encryption","text":""},{"location":"opprl/spec/#224-encode-base64","title":"2.2.4 Encode Base64","text":""},{"location":"opprl/spec/#3-opprl-pii-transformations","title":"3 OPPRL PII Transformations","text":""},{"location":"opprl/spec/#31-normalizations","title":"3.1 Normalizations","text":""},{"location":"opprl/spec/#person-names","title":"Person Names","text":""},{"location":"opprl/spec/#gender","title":"Gender","text":""},{"location":"opprl/spec/#dates","title":"Dates","text":""},{"location":"opprl/spec/#32-enhancements","title":"3.2 Enhancements","text":""},{"location":"opprl/spec/#person-names_1","title":"Person Names","text":""},{"location":"opprl/spec/#dates_1","title":"Dates","text":""},{"location":"opprl/spec/#5-opprl-token-specifications","title":"5 OPPRL Token Specifications","text":""}]}